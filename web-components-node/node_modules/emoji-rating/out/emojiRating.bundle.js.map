{"version":3,"file":"emojiRating.bundle.js","sources":["../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/@polymer/lit-element/lib/updating-element.js","../node_modules/@polymer/lit-element/lit-element.js","../node_modules/lit-html/directives/repeat.js","../src/emojiRating.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = 0;\n    let part = parts[0];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            part = parts[++partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            refNode.parentNode.insertBefore(node, refNode);\n            insertCount = countNodes(node);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this._getTemplate);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill, removeNodes } from './dom.js';\nimport { templateFactory as defaultTemplateFactory } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nexport const templateInstances = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = templateInstances.get(container);\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance.processor === result.processor) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(template, result.processor, templateFactory);\n    templateInstances.set(container, instance);\n    const fragment = instance._clone();\n    removeNodes(container, container.firstChild);\n    // Since we cloned in the polyfill case, now force an upgrade\n    if (isCEPolyfill && !container.isConnected) {\n        document.adoptNode(fragment);\n        customElements.upgrade(fragment);\n    }\n    container.appendChild(fragment);\n    instance.update(result.values);\n}\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { isCEPolyfill, removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(templateFactory) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.templateFactory = templateFactory;\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.templateFactory(value);\n        let instance;\n        if (this.value && this.value.template === template) {\n            instance = this.value;\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use it's syntax extension, etc. The template factory comes\n            // from the render function so that it can control caching.\n            instance =\n                new TemplateInstance(template, value.processor, this.templateFactory);\n            const fragment = instance._clone();\n            // Since we cloned in the polyfill case, now force an upgrade\n            if (isCEPolyfill && !this.endNode.isConnected) {\n                document.adoptNode(fragment);\n                customElements.upgrade(fragment);\n            }\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n        instance.update(value.values);\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.templateFactory);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\nexport class EventPart {\n    constructor(element, eventName) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        if ((this._pendingValue == null) !== (this.value == null)) {\n            if (this._pendingValue == null) {\n                this.element.removeEventListener(this.eventName, this);\n            }\n            else {\n                this.element.addEventListener(this.eventName, this);\n            }\n        }\n        this.value = this._pendingValue;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.element, event);\n        }\n        else if (typeof this.value.handleEvent === 'function') {\n            this.value.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1))];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(templateFactory) {\n        return new NodePart(templateFactory);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { templateInstances } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nconst verifyShadyCSSVersion = () => {\n    if (typeof window.ShadyCSS === 'undefined') {\n        return false;\n    }\n    if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n        console.warn(`Incompatible ShadyCSS version detected.` +\n            `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n            `@webcomponents/shadycss@1.3.1.`);\n        return false;\n    }\n    return true;\n};\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (verifyShadyCSSVersion()) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nfunction removeStylesFromLitTemplates(scopeName) {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n}\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst ensureStylesScoped = (fragment, template, scopeName) => {\n    // only scope element template once per scope name\n    if (!shadyRenderSet.has(scopeName)) {\n        shadyRenderSet.add(scopeName);\n        const styleTemplate = document.createElement('template');\n        Array.from(fragment.querySelectorAll('style')).forEach((s) => {\n            styleTemplate.content.appendChild(s);\n        });\n        window.ShadyCSS.prepareTemplateStyles(styleTemplate, scopeName);\n        // Fix templates: note the expectation here is that the given `fragment`\n        // has been generated from the given `template` which contains\n        // the set of templates rendered into this scope.\n        // It is only from this set of initial templates from which styles\n        // will be scoped and removed.\n        removeStylesFromLitTemplates(scopeName);\n        // ApplyShim case\n        if (window.ShadyCSS.nativeShadow) {\n            const style = styleTemplate.content.querySelector('style');\n            if (style !== null) {\n                // Insert style into rendered fragment\n                fragment.insertBefore(style, fragment.firstChild);\n                // Insert into lit-template (for subsequent renders)\n                insertNodeIntoTemplate(template, style.cloneNode(true), template.element.content.firstChild);\n            }\n        }\n    }\n};\n// NOTE: We're copying code from lit-html's `render` method here.\n// We're doing this explicitly because the API for rendering templates is likely\n// to change in the near term.\nexport function render(result, container, scopeName) {\n    const templateFactory = shadyTemplateFactory(scopeName);\n    const template = templateFactory(result);\n    let instance = templateInstances.get(container);\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance.processor === result.processor) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(template, result.processor, templateFactory);\n    templateInstances.set(container, instance);\n    const fragment = instance._clone();\n    instance.update(result.values);\n    const host = container instanceof ShadowRoot ? container.host : undefined;\n    // If there's a shadow host, do ShadyCSS scoping...\n    if (host !== undefined && verifyShadyCSSVersion()) {\n        ensureStylesScoped(fragment, template, scopeName);\n        window.ShadyCSS.styleElement(host);\n    }\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Decorator which creates a property. Optionally a `PropertyDeclaration` object\n * can be supplied to describe how the property should be configured.\n */\nexport const property = (options) => (proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function') ? Object.getOwnPropertySymbols(props) : []];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false ? undefined : (typeof attribute === 'string' ?\n            attribute : (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean ? fromBooleanAttribute :\n            (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean ? toBooleanAttribute :\n            (options.type && options.type.toAttribute || String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot` to\n     * create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the constructor\n     * runs.\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] = ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be called\n     * when manually implementing a property setter. In this case, pass the property\n     * `name` and `oldValue` to ensure that any configured property options are honored.\n     * Returns the `updateComplete` Promise which is resolved when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            const needsFirstUpdate = !(this._updateState & STATE_HAS_UPDATED);\n            this._markUpdated();\n            if (needsFirstUpdate) {\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED | STATE_HAS_UPDATED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating\n     * that resolves to a boolean value that is `true` if the element completed\n     * the update without triggering another update. This happens if a property\n     * is set in `updated()`. This getter can be implemented to await additional\n     * state. For example, it is sometimes useful to await a rendered element before\n     * fulfilling this Promise. To do this, first await `super.updateComplete`\n     * then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's `renderRoot`.\n     * Setting properties inside this method will *not* trigger another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined && this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        if (typeof this.render === 'function') {\n            this.constructor.render(this.render(), this.renderRoot, this.localName);\n        }\n        else {\n            throw new Error('render() not implemented');\n        }\n    }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\nconst keyMapCache = new WeakMap();\nfunction cleanMap(part, key, map) {\n    if (!part.startNode.parentNode) {\n        map.delete(key);\n    }\n}\nexport function repeat(items, keyFnOrTemplate, template) {\n    let keyFn;\n    if (arguments.length === 2) {\n        template = keyFnOrTemplate;\n    }\n    else if (arguments.length === 3) {\n        keyFn = keyFnOrTemplate;\n    }\n    return directive((part) => {\n        let keyMap = keyMapCache.get(part);\n        if (keyMap === undefined) {\n            keyMap = new Map();\n            keyMapCache.set(part, keyMap);\n        }\n        const container = part.startNode.parentNode;\n        let index = -1;\n        let currentMarker = part.startNode.nextSibling;\n        for (const item of items) {\n            let result;\n            let key;\n            try {\n                ++index;\n                result = template(item, index);\n                key = keyFn ? keyFn(item) : index;\n            }\n            catch (e) {\n                console.error(e);\n                continue;\n            }\n            // Try to reuse a part\n            let itemPart = keyMap.get(key);\n            if (itemPart === undefined) {\n                // TODO(justinfagnani): We really want to avoid manual marker creation\n                // here and instead use something like part.insertBeforePart(). This\n                // requires a little refactoring, like iterating through values and\n                // existing parts like NodePart#_setIterable does. We can also remove\n                // keyMapCache and use part._value instead.\n                // But... repeat() is badly in need of rewriting, so we'll do this for\n                // now and revisit soon.\n                const marker = document.createComment('');\n                const endNode = document.createComment('');\n                container.insertBefore(marker, currentMarker);\n                container.insertBefore(endNode, currentMarker);\n                itemPart = new NodePart(part.templateFactory);\n                itemPart.insertAfterNode(marker);\n                if (key !== undefined) {\n                    keyMap.set(key, itemPart);\n                }\n            }\n            else if (currentMarker !== itemPart.startNode) {\n                // Existing part in the wrong position\n                const end = itemPart.endNode.nextSibling;\n                if (currentMarker !== end) {\n                    reparentNodes(container, itemPart.startNode, end, currentMarker);\n                }\n            }\n            else {\n                // else part is in the correct position already\n                currentMarker = itemPart.endNode.nextSibling;\n            }\n            itemPart.setValue(result);\n            itemPart.commit();\n        }\n        // Cleanup\n        if (currentMarker !== part.endNode) {\n            removeNodes(container, currentMarker, part.endNode);\n            keyMap.forEach(cleanMap);\n        }\n    });\n}\n//# sourceMappingURL=repeat.js.map","import { html, LitElement } from '@polymer/lit-element';\nimport { repeat } from 'lit-html/directives/repeat';\n\nexport default class EmojiRating extends LitElement {\n  static get properties() {\n    return {\n      value: {\n        type: Number,\n      },\n      min: {\n        type: Number,\n      },\n      max: {\n        type: Number,\n      },\n      emoji: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.min = 0;\n    this.max = 5;\n    this.value = 0;\n    this.emoji = '🐼';\n    this._renderEmoji = this._renderEmoji.bind(this);\n    this._setValueOnClick = this._setValueOnClick.bind(this);\n  }\n\n  render() {\n    const { min, max, value, emoji } = this;\n    const emojiArray = [...emoji.repeat(max)];\n    return html`\n      <style>\n        .rating {\n          display: flex;\n          font-size: 3em;\n        }\n\n        .emoji {\n          cursor: pointer;\n          color: rgba(0, 0, 0, 0);\n          text-shadow: 0px 0px 0px var(--emoji-rating-unselected-color, #444);\n        }\n\n        .emoji.active {\n          color: rgba(0, 0, 0, 1);\n        }\n      </style>\n      <div class=\"rating\" aria-role=\"range\" aria-valuemin=\"${min}\" aria-valuemax=\"${max}\" aria-valuenow=\"${value}\">\n        ${repeat(emojiArray, (emoji, idx) => idx, this._renderEmoji)}\n      </div>\n    `;\n  }\n\n  _renderEmoji(emoji, idx) {\n    const value = this.value;\n    return html`\n      <div class=\"emoji ${\n        idx < value ? 'active' : ''\n      }\" data-idx=\"${idx}\" @click=\"${this._setValueOnClick}\">${emoji}</div>\n    `;\n  }\n\n  async _setValueOnClick(event) {\n    const value = parseInt(event.target.dataset.idx, 10) + 1;\n    if (value === this.value) {\n      this.value = 0;\n    } else {\n      this.value = value;\n    }\n\n    await this.updateComplete;\n    this.dispatchEvent(\n      new CustomEvent('change', { detail: { value: this.value } })\n    );\n  }\n}\n\ncustomElements.define('emoji-rating', EmojiRating);\n"],"names":["isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","node","n","nextSibling","insertBefore","removeNodes","startNode","endNode","removeChild","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","countNodes","nextActiveIndexInTemplateParts","startIndex","templateCaches","Map","TemplateInstance","processor","getTemplate","_parts","_getTemplate","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","templateInstances","WeakMap","directives","directive","f","set","isDirective","o","has","noChange","TemplateResult","l","html","isTextBinding","s","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","text","v","Array","isArray","Symbol","iterator","t","_getValue","comitter","committer","NodePart","templateFactory","_pendingValue","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","instance","_clone","isConnected","adoptNode","upgrade","update","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","EventPart","eventName","removeEventListener","addEventListener","event","call","handleEvent","defaultTemplateProcessor","prefix","getTemplateCacheKey","scopeName","verifyShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","templateCache","get","getTemplateElement","TEMPLATE_TYPES","removeStylesFromLitTemplates","forEach","templates","styles","Set","from","querySelectorAll","add","removeCount","nodesToRemoveInTemplate","currentRemovingNode","removeNodesFromTemplate","shadyRenderSet","ensureStylesScoped","styleTemplate","appendChild","prepareTemplateStyles","nativeShadow","style","querySelector","firstChild","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","observedAttributes","_finalize","p","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","options","hasOwnProperty","superProperties","Object","getPrototypeOf","k","prototype","key","defineProperty","oldValue","_requestPropertyUpdate","configurable","enumerable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","mode","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","r","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","needsFirstUpdate","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","LitElement","render","localName","host","ShadowRoot","keyMapCache","cleanMap","map","delete","EmojiRating","Number","min","max","emoji","_renderEmoji","bind","_setValueOnClick","items","keyFnOrTemplate","keyFn","arguments","keyMap","currentMarker","e","error","repeat","idx","parseInt","target","dataset","dispatchEvent","CustomEvent","detail","define"],"mappings":"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"}